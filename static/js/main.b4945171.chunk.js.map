{"version":3,"sources":["logo.svg","containers/Login/Credentials.js","containers/Login/Login.js","redux-store/actions.js","containers/Dashboard/Dashboard.js","containers/EmployeeList/EmployeeList.js","containers/App/App.js","serviceWorker.js","redux-store/reducers/employeeReducer.js","redux-store/reducers/employeeListData.js","redux-store/reducers/loginReducer.js","redux-store/reducers/rootReducer.js","redux-store/store.js","index.js"],"names":["module","exports","__webpack_require__","p","Credentials","username","password","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickHandler","inputUsernameRef","current","value","inputPasswordRef","onloginUser","history","push","React","createRef","_this2","react_default","a","createElement","style","listStyleType","type","ref","onClick","Component","connect","dispatch","Dashboard","headers","keys","employeeListData","tableHeader","map","header","key","toUpperCase","cellRenderer","user","id","name","age","gender","email","phoneNo","state","employeeListReducer","EmployeeList","containers_Dashboard_Dashboard","SecuredRotes","react_router","path","component","isUserAuthenticated","loginReducer","className","exact","App_SecuredRotes","render","Boolean","window","location","hostname","match","intialState","reducer","arguments","length","undefined","action","rootReducer","combineReducers","store","createStore","ReactDOM","es","react_router_dom","basename","process","containers_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4945171.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const Credentials = {\n    \"username\":\"hruday@gmail.com\",\n    \"password\":\"hruday123\"\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../../redux-store/actions';\nimport { Credentials } from './Credentials';\n\nclass Login extends React.Component{\n    constructor(props){\n        super(props);\n        this.inputUsernameRef = React.createRef();\n        this.inputPasswordRef = React.createRef();\n    }\n    clickHandler = () => {\n        let username = this.inputUsernameRef.current.value;\n        let password = this.inputPasswordRef.current.value;\n        \n        if(username === Credentials.username && password === Credentials.password){\n            this.props.onloginUser(true);\n            this.props.history.push('/employeeList');\n        }\n    }\n    render(){\n        return(\n            <div>\n                <ul style={{listStyleType: \"none\"}}>\n                    <li>Username <input type='text'  ref={this.inputUsernameRef} /></li>\n                    <li>Password <input type='password'  ref={this.inputPasswordRef} /></li>\n                    <li><button onClick={() => this.clickHandler()}>Login</button></li>\n                </ul>                \n            </div>\n        )\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        onloginUser: (value) => dispatch({type: actionTypes.LOGIN, value: value})\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Login);","export const LOGIN = 'LOGIN';\nexport const EMPLOYEE = 'EMPLOYEE';\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport './Dashboard.css';\n\nclass Dashboard extends React.Component{    \n    headers = Object.keys(this.props.employeeListData[0]);\n    tableHeader = () => (\n        <thead>\n            <tr>\n                {this.headers.map(header => (<th key={header}>{header.toUpperCase()}</th>))}\n            </tr>\n        </thead>\n    )\n    cellRenderer = () => (\n        <tbody>\n            {\n                this.props.employeeListData.map(user => (\n                    <tr key={user.id}>\n                        <td>{user.id}</td>\n                        <td>{user.name}</td>\n                        <td>{user.age}</td>\n                        <td>{user.gender}</td>\n                        <td>{user.email}</td>\n                        <td>{user.phoneNo}</td>\n                    </tr>\n                ))\n            }\n        </tbody>\n    )\n    render(){\n        return(\n            <table id=\"employees\">\n                {this.tableHeader()}\n                {this.cellRenderer()}\n            </table>                \n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        employeeListData: state.employeeListReducer.employeeListData\n    }\n}\nexport default connect(mapStateToProps)(Dashboard);","import React from 'react';\n\nimport Dashboard from '../Dashboard/Dashboard';\n\nconst EmployeeList = () => (<Dashboard />);\n\nexport default EmployeeList;","import React from 'react';\nimport logo from '../../logo.svg';\nimport './App.css';\nimport { Route, Switch} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Login from '../Login/Login';\nimport EmployeeList from '../EmployeeList/EmployeeList';\n\nconst SecuredRotes = () => (<Route path=\"/employeeList\" component={EmployeeList} />);\n\nconst App = (props) => {\n  // console.log(props.isUserAuthenticated)\n  return(\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={Login} />\n        <Route path=\"/login\" component={Login} />\n        {\n          props.isUserAuthenticated ? <SecuredRotes /> : null\n        }\n        <Route render={() => <div><center>Page Not Found</center></div>} />\n    </Switch>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return{\n    isUserAuthenticated: state.loginReducer.isUserAuthenticated\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions';\n\nimport { employeeListData }  from './employeeListData';\n\nconst intialState = {\n    employeeListData: employeeListData\n};\n\nconst reducer = (state=intialState, action) => {\n    switch(action.type){\n        case actionTypes.EMPLOYEE:\n            return{\n                employeeListData: action.value\n            }\n        default: \n            return state;\n    }    \n}\n\nexport default reducer;","export const employeeListData = [\n    {\n       \"id\":1,\n       \"name\":\"test1\",\n       \"age\":\"11\",\n       \"gender\":\"male\",\n       \"email\":\"test1@gmail.com\",\n       \"phoneNo\":\"9415346313\"\n    },\n    {\n       \"id\":2,\n       \"name\":\"test2\",\n       \"age\":\"12\",\n       \"gender\":\"male\",\n       \"email\":\"test2@gmail.com\",\n       \"phoneNo\":\"9415346314\"\n    },\n    {\n       \"id\":3,\n       \"name\":\"test3\",\n       \"age\":\"13\",\n       \"gender\":\"male\",\n       \"email\":\"test3@gmail.com\",\n       \"phoneNo\":\"9415346315\"\n    },\n    {\n       \"id\":4,\n       \"name\":\"test4\",\n       \"age\":\"14\",\n       \"gender\":\"male\",\n       \"email\":\"test4@gmail.com\",\n       \"phoneNo\":\"9415346316\"\n    },\n    {\n       \"id\":5,\n       \"name\":\"test5\",\n       \"age\":\"15\",\n       \"gender\":\"male\",\n       \"email\":\"test5@gmail.com\",\n       \"phoneNo\":\"9415346317\"\n    },\n    {\n       \"id\":6,\n       \"name\":\"test6\",\n       \"age\":\"16\",\n       \"gender\":\"male\",\n       \"email\":\"test6@gmail.com\",\n       \"phoneNo\":\"9415346318\"\n    }\n ]\n","import * as actionTypes from '../actions';\n\nconst intialState = {\n    isUserAuthenticated: false\n};\n\nconst reducer = (state=intialState, action) => {\n    switch(action.type){\n        case actionTypes.LOGIN: \n            return{\n                isUserAuthenticated: action.value\n            }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import { combineReducers } from 'redux';\n\nimport employeeListReducer from './employeeReducer';\nimport loginReducer from './loginReducer';\n\nconst rootReducer = combineReducers({employeeListReducer, loginReducer});\n\nexport default rootReducer;","import { createStore } from 'redux';\n\nimport reducer from './reducers/rootReducer';\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux-store/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <App />\n        </BrowserRouter>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}